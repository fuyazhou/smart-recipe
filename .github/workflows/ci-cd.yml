name: Smart Recipe CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # 代码质量检查
  lint-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_smart_recipe
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    # 设置Python环境
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # 设置Node.js环境
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: web/package-lock.json

    # 安装Python依赖
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # 安装Node.js依赖
    - name: Install Node.js dependencies
      run: |
        cd web
        npm ci

    # Python代码检查
    - name: Lint Python code
      run: |
        cd backend
        flake8 app/
        black --check app/
        isort --check-only app/

    # TypeScript代码检查
    - name: Lint TypeScript code
      run: |
        cd web
        npm run lint
        npm run type-check

    # 运行后端测试
    - name: Run backend tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_smart_recipe
        REDIS_URL: redis://localhost:6379/0
      run: |
        cd backend
        python -m pytest --cov=app --cov-report=xml

    # 运行前端测试
    - name: Run frontend tests
      run: |
        cd web
        npm test

    # 上传测试覆盖率
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml

  # 构建和部署到中国环境
  deploy-china:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        region: [china]
    
    steps:
    - uses: actions/checkout@v4

    # 设置Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 登录到阿里云容器镜像服务
    - name: Login to Aliyun Container Registry
      uses: docker/login-action@v3
      with:
        registry: registry.cn-hangzhou.aliyuncs.com
        username: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
        password: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}

    # 构建并推送后端镜像
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          registry.cn-hangzhou.aliyuncs.com/smartrecipe/backend:${{ github.sha }}
          registry.cn-hangzhou.aliyuncs.com/smartrecipe/backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # 构建并推送前端镜像
    - name: Build and push web image
      uses: docker/build-push-action@v5
      with:
        context: ./web
        file: ./web/Dockerfile.prod
        build-args: |
          REGION=china
          ENVIRONMENT=production
        push: true
        tags: |
          registry.cn-hangzhou.aliyuncs.com/smartrecipe/web:${{ github.sha }}
          registry.cn-hangzhou.aliyuncs.com/smartrecipe/web:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # 部署到阿里云Kubernetes
    - name: Deploy to Aliyun Kubernetes
      run: |
        # 这里需要配置kubectl和阿里云凭证
        echo "部署到阿里云Kubernetes集群"
        # kubectl apply -f configs/china/k8s/

  # 构建和部署到美国环境
  deploy-us:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        region: [us]
    
    steps:
    - uses: actions/checkout@v4

    # 设置AWS凭证
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # 登录到Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # 构建并推送后端镜像
    - name: Build and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: smartrecipe/backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    # 构建并推送前端镜像
    - name: Build and push web image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: smartrecipe/web
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f ./web/Dockerfile.prod \
          --build-arg REGION=us \
          --build-arg ENVIRONMENT=production \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./web
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    # 部署到AWS EKS
    - name: Deploy to AWS EKS
      run: |
        # 配置kubectl
        aws eks update-kubeconfig --region us-east-1 --name smartrecipe-us
        # kubectl apply -f configs/us/k8s/

  # 构建iOS应用
  build-ios:
    needs: lint-and-test
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    # 设置Xcode
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    # 安装依赖
    - name: Install dependencies
      run: |
        cd mobile/ios
        pod install

    # 构建iOS应用
    - name: Build iOS app
      run: |
        cd mobile/ios
        xcodebuild -workspace SmartRecipe.xcworkspace \
          -scheme SmartRecipe \
          -configuration Release \
          -destination 'generic/platform=iOS' \
          archive -archivePath SmartRecipe.xcarchive

  # 构建Android应用
  build-android:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    # 设置Java环境
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 构建Android应用 (中国版本)
    - name: Build Android app (China)
      run: |
        cd mobile/android
        ./gradlew assembleChinaRelease

    # 构建Android应用 (美国版本)
    - name: Build Android app (US)
      run: |
        cd mobile/android
        ./gradlew assembleUsRelease 